[
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "PyMongo",
        "importPath": "flask_pymongo",
        "description": "flask_pymongo",
        "isExtraImport": true,
        "detail": "flask_pymongo",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "Bcrypt",
        "importPath": "flask_bcrypt",
        "description": "flask_bcrypt",
        "isExtraImport": true,
        "detail": "flask_bcrypt",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "create_product",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_product_by_id",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "delete_product_by_id",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "update_or_add_cart_item",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "clear_cart",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "search_products",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "mongo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "check_role",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "TelegramClient",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "telethon",
        "description": "telethon",
        "isExtraImport": true,
        "detail": "telethon",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "add_security_headers",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def add_security_headers(response):\n    response.headers[\"Content-Security-Policy\"] = (\n        \"default-src 'self'; connect-src 'self' http://localhost:5000\"\n    )\n    return response\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n    data = request.json\n    result = create_user(data[\"username\"], data[\"email\"], data[\"password\"])\n    return jsonify(result)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def register():\n    data = request.json\n    result = create_user(data[\"username\"], data[\"email\"], data[\"password\"])\n    return jsonify(result)\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    data = request.json\n    user = mongo.db.users.find_one({\"username\": data.get(\"username\")})\n    # Kiểm tra nếu người dùng tồn tại và mật khẩu khớp\n    if user and bcrypt.check_password_hash(user[\"password\"], data[\"password\"]):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def login():\n    data = request.json\n    user = mongo.db.users.find_one({\"username\": data.get(\"username\")})\n    # Kiểm tra nếu người dùng tồn tại và mật khẩu khớp\n    if user and bcrypt.check_password_hash(user[\"password\"], data[\"password\"]):\n        # Tạo phản hồi trả về thông tin tài khoản, bao gồm username và role\n        user_info = {\n            \"username\": user[\"username\"],\n            \"role\": user.get(\"role\", \"user\")  # Lấy role, nếu không có thì trả về \"user\" mặc định\n        }",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "add_product",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def add_product():\n    data = request.json\n    result = create_product(\n        data[\"title\"],\n        data[\"price\"],\n        data.get(\"description\", \"\"),\n        data.get(\"image\", \"\"),\n        data.get(\"rating\"),\n    )\n    return jsonify(result)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "get_products",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_products():\n    products = mongo.db.products.find()\n    result = []\n    for product in products:\n        product_dict = {\n            \"id\": str(product[\"_id\"]),\n            \"title\": product[\"title\"],\n            \"price\": product[\"price\"],\n            \"description\": product[\"description\"],\n            \"rating\": product[\"rating\"],",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "get_product",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_product(product_id):\n    product = get_product_by_id(product_id)\n    if \"error\" in product:\n        return jsonify(product), 404\n    image_data = product.get(\"image\")\n    if isinstance(image_data, bytes):\n        base64_image = base64.b64encode(image_data).decode(\"utf-8\")\n        product[\"image\"] = f\"data:image/jpeg;base64,{base64_image}\"\n    return jsonify(product)\n@app.route(\"/cart\", methods=[\"PUT\"])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "update_or_add_to_cart",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def update_or_add_to_cart():\n    data = request.json\n    print(data)\n    print(data[\"quantity\"])\n    result = update_or_add_cart_item(\n        data[\"username\"], data[\"product_id\"], data[\"quantity\"]\n    )\n    return jsonify(result)\n@app.route(\"/cart\", methods=[\"DELETE\"])\ndef remove_from_cart_route():",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "remove_from_cart_route",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def remove_from_cart_route():\n    data = request.json\n    username = data.get(\"username\")\n    product_id = data.get(\"product_id\")\n    qty = data.get(\"qty\", None)  # Sử dụng `None` nếu `qty` không có trong dữ liệu yêu cầu\n    result = remove_from_cart(username, product_id, qty)\n    print(result)\n    return jsonify(result)\n@app.route(\"/cart\", methods=[\"GET\"])\ndef view_cart():",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "view_cart",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def view_cart():\n    username = request.args.get(\"username\")\n    if not username:\n        return jsonify({\"error\": \"Yêu cầu username\"}), 400  # Xử lý yêu cầu không hợp lệ\n    result = get_cart(username)\n    if \"error\" in result:\n        return jsonify(result), 404  # Xử lý khi không tìm thấy giỏ hàng\n    return jsonify(result), 200\n@app.route(\"/checkout\", methods=[\"POST\"])\ndef checkout():",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def checkout():\n    data = request.json\n    result = clear_cart(data[\"username\"])\n    return jsonify(result)\n@app.route(\"/search\", methods=[\"GET\"])\ndef search():\n    query = request.args.get(\"q\", \"\")\n    search_type = request.args.get(\"type\", \"long\")\n    if not query:\n        return jsonify({\"error\": \"Yêu cầu cung cấp từ khóa tìm kiếm\"}), 400",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def search():\n    query = request.args.get(\"q\", \"\")\n    search_type = request.args.get(\"type\", \"long\")\n    if not query:\n        return jsonify({\"error\": \"Yêu cầu cung cấp từ khóa tìm kiếm\"}), 400\n    results = search_products(query, search_type)\n    return jsonify(results), 200\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.config.from_object(Config)\nmongo = PyMongo(app)\nbcrypt = Bcrypt(app)\n@app.after_request\ndef add_security_headers(response):\n    response.headers[\"Content-Security-Policy\"] = (\n        \"default-src 'self'; connect-src 'self' http://localhost:5000\"\n    )",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "mongo",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "mongo = PyMongo(app)\nbcrypt = Bcrypt(app)\n@app.after_request\ndef add_security_headers(response):\n    response.headers[\"Content-Security-Policy\"] = (\n        \"default-src 'self'; connect-src 'self' http://localhost:5000\"\n    )\n    return response\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "bcrypt = Bcrypt(app)\n@app.after_request\ndef add_security_headers(response):\n    response.headers[\"Content-Security-Policy\"] = (\n        \"default-src 'self'; connect-src 'self' http://localhost:5000\"\n    )\n    return response\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n    data = request.json",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.config",
        "description": "backend.config",
        "peekOfCode": "class Config:\n    MONGO_URI = \"mongodb://localhost:27017/ecommerce\"  # Đổi URL nếu MongoDB đang chạy ở địa chỉ khác",
        "detail": "backend.config",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def create_user(username, email, password, role=\"user\"):\n    # Kiểm tra xem username đã tồn tại chưa\n    if mongo.db.users.find_one({\"username\": username}):\n        return {\"error\": \"Tên người dùng đã tồn tại\"}\n    # Kiểm tra xem email đã tồn tại chưa\n    if mongo.db.users.find_one({\"email\": email}):\n        return {\"error\": \"Email đã được sử dụng\"}\n    # Nếu cả username và email đều chưa tồn tại, tiến hành tạo user mới\n    hashed_password = bcrypt.generate_password_hash(password).decode(\"utf-8\")\n    mongo.db.users.insert_one(",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "create_product",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def create_product(title, price, description=\"\", image=\"\", rating=None):\n    if rating is None:\n        rating = {\"rate\": 0, \"count\": 0}\n    new_product = mongo.db.products.insert_one(\n        {\n            \"title\": title,\n            \"price\": price,\n            \"description\": description,\n            \"image\": image,\n            \"rating\": rating,",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "get_product_by_id",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def get_product_by_id(product_id):\n    product = mongo.db.products.find_one({\"_id\": ObjectId(product_id)})\n    if product:\n        return {\n            \"id\": str(product[\"_id\"]),\n            \"title\": product[\"title\"],\n            \"price\": product[\"price\"],\n            \"description\": product[\"description\"],\n            \"image\": product[\"image\"],\n            \"rating\": product[\"rating\"],",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "delete_product_by_id",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def delete_product_by_id(product_id):\n    result = mongo.db.products.delete_one({\"_id\": ObjectId(product_id)})\n    if result.deleted_count > 0:\n        return {\"message\": \"Sản phẩm đã được xóa thành công\"}\n    return {\"error\": \"Không tìm thấy sản phẩm\"}\ndef update_or_add_cart_item(username, product_id, quantity):\n    try:\n        cart = mongo.db.carts.find_one({\"username\": username})\n        if not cart:\n            cart = {\"username\": username, \"products\": []}",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "update_or_add_cart_item",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def update_or_add_cart_item(username, product_id, quantity):\n    try:\n        cart = mongo.db.carts.find_one({\"username\": username})\n        if not cart:\n            cart = {\"username\": username, \"products\": []}\n        product = next(\n            (item for item in cart.get(\"products\", []) if item[\"id\"] == product_id),\n            None,\n        )\n        print(product)",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def remove_from_cart(username, product_id, quantity):\n    try:\n        cart = mongo.db.carts.find_one({\"username\": username})\n        if not cart:\n            return {\"error\": \"Giỏ hàng không tồn tại\"}, 404\n        # Tìm sản phẩm trong giỏ hàng\n        product = next(\n            (item for item in cart.get(\"products\", []) if item[\"id\"] == product_id),\n            None,\n        )",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def get_cart(username):\n    user = mongo.db.users.find_one({\"username\": username})\n    if not user:\n        return {\"error\": \"User not found\"}, 404  # Xử lý khi không tìm thấy người dùng\n    cart = mongo.db.carts.find_one({\"username\": username})\n    if not cart:\n        return {\"products\": []}  # Trả về giỏ hàng trống nếu không tìm thấy giỏ hàng\n    # Ghi thêm nhật ký\n    print(f\"Fetched cart for user: {username}\")\n    return {\"products\": cart.get(\"products\", [])}",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "clear_cart",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def clear_cart(username):\n    result = mongo.db.carts.delete_one({\"username\": username})\n    if result.deleted_count > 0:\n        return {\"message\": \"Giỏ hàng đã được xóa\"}\n    else:\n        return {\"message\": \"Giỏ hàng đã trống\"}\ndef search_products(query, search_type=\"long\"):\n    # Thực hiện tìm kiếm không phân biệt chữ hoa/thường trên title và description\n    mongo_query = {\n        \"$or\": [",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "search_products",
        "kind": 2,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "def search_products(query, search_type=\"long\"):\n    # Thực hiện tìm kiếm không phân biệt chữ hoa/thường trên title và description\n    mongo_query = {\n        \"$or\": [\n            {\"title\": {\"$regex\": query, \"$options\": \"i\"}},\n            {\"description\": {\"$regex\": query, \"$options\": \"i\"}},\n        ]\n    }\n    # Nếu search_type là \"less\", giới hạn kết quả là 5\n    limit = 5 if search_type == \"less\" else 0",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(\"config.Config\")\nmongo = PyMongo(app)\nbcrypt = Bcrypt(app)\ndef create_user(username, email, password, role=\"user\"):\n    # Kiểm tra xem username đã tồn tại chưa\n    if mongo.db.users.find_one({\"username\": username}):\n        return {\"error\": \"Tên người dùng đã tồn tại\"}\n    # Kiểm tra xem email đã tồn tại chưa\n    if mongo.db.users.find_one({\"email\": email}):",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "mongo",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "mongo = PyMongo(app)\nbcrypt = Bcrypt(app)\ndef create_user(username, email, password, role=\"user\"):\n    # Kiểm tra xem username đã tồn tại chưa\n    if mongo.db.users.find_one({\"username\": username}):\n        return {\"error\": \"Tên người dùng đã tồn tại\"}\n    # Kiểm tra xem email đã tồn tại chưa\n    if mongo.db.users.find_one({\"email\": email}):\n        return {\"error\": \"Email đã được sử dụng\"}\n    # Nếu cả username và email đều chưa tồn tại, tiến hành tạo user mới",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 5,
        "importPath": "backend.models",
        "description": "backend.models",
        "peekOfCode": "bcrypt = Bcrypt(app)\ndef create_user(username, email, password, role=\"user\"):\n    # Kiểm tra xem username đã tồn tại chưa\n    if mongo.db.users.find_one({\"username\": username}):\n        return {\"error\": \"Tên người dùng đã tồn tại\"}\n    # Kiểm tra xem email đã tồn tại chưa\n    if mongo.db.users.find_one({\"email\": email}):\n        return {\"error\": \"Email đã được sử dụng\"}\n    # Nếu cả username và email đều chưa tồn tại, tiến hành tạo user mới\n    hashed_password = bcrypt.generate_password_hash(password).decode(\"utf-8\")",
        "detail": "backend.models",
        "documentation": {}
    },
    {
        "label": "check_role",
        "kind": 2,
        "importPath": "backend.utils",
        "description": "backend.utils",
        "peekOfCode": "def check_role(role):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            username = request.json.get('username')\n            user = mongo.db.users.find_one({'username': username})\n            if user and user.get('role') == role:\n                return f(*args, **kwargs)\n            return jsonify({\"error\": \"Unauthorized\"}), 403\n        return wrapper",
        "detail": "backend.utils",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.flatted",
        "description": "beestore.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "beestore.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "beestore.node_modules.flatted.python.test",
        "description": "beestore.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "beestore.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "chrome_options",
        "kind": 5,
        "importPath": "createFolder",
        "description": "createFolder",
        "peekOfCode": "chrome_options = Options()\n# chrome_options.add_argument('--headless')  # Chạy ở chế độ headless (không hiển thị trình duyệt)\nchrome_options.add_argument('--user-agent=Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Mobile Safari/537.36')\n# Sử dụng webdriver-manager để tự động cài đặt ChromeDriver\ndriver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)\n# Truy cập trang web\ndriver.get(\"https://app.golike.net\")\ninput('enter')\n# Lấy mã HTML của trang\n# /html/body/div[1]/div/div[1]/div[2]/div/div[1]/div/div/div[2]/div/span (text => tên acc)",
        "detail": "createFolder",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "createFolder",
        "description": "createFolder",
        "peekOfCode": "driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)\n# Truy cập trang web\ndriver.get(\"https://app.golike.net\")\ninput('enter')\n# Lấy mã HTML của trang\n# /html/body/div[1]/div/div[1]/div[2]/div/div[1]/div/div/div[2]/div/span (text => tên acc)\n# Đóng trình duyệt sau khi hoàn thành\ndriver.quit()",
        "detail": "createFolder",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "user = 'trump_fight_bot'\ncookies = {\n    'guest_id': '171604368715756453',\n    'night_mode': '2',\n    'guest_id_marketing': 'v1%3A171604368715756453',\n    'guest_id_ads': 'v1%3A171604368715756453',\n    '_ga': 'GA1.2.1059021348.1716043700',\n    'g_state': '{\"i_l\":0}',\n    'kdt': 'at16C4h7LdwkEQ66yVJZkbRpkSyVTecEk8GLHRVZ',\n    'auth_token': 'a84bcf5ac7e2386f6f1f9bc830fb817d38858ded',",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "cookies",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "cookies = {\n    'guest_id': '171604368715756453',\n    'night_mode': '2',\n    'guest_id_marketing': 'v1%3A171604368715756453',\n    'guest_id_ads': 'v1%3A171604368715756453',\n    '_ga': 'GA1.2.1059021348.1716043700',\n    'g_state': '{\"i_l\":0}',\n    'kdt': 'at16C4h7LdwkEQ66yVJZkbRpkSyVTecEk8GLHRVZ',\n    'auth_token': 'a84bcf5ac7e2386f6f1f9bc830fb817d38858ded',\n    'ct0': 'bc21315b56f43f409e44806b6ab46e995edb3c47918ca6b88651525745bfab97762556ddcf34c6ed2bab50c07fd7c06b797c7295e8fd7885c107fd9406f9ab00afbaad4c366cc873b22bd26cbb8938d1',",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "headers = {\n    'accept': '*/*',\n    'accept-language': 'en-US,en;q=0.9,vi;q=0.8',\n    'authorization': 'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA',\n    'content-type': 'application/json',\n    'priority': 'u=1, i',\n    'referer': f'https://x.com/{user}',\n    'sec-ch-ua': '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Microsoft Edge\";v=\"128\"',\n    'sec-ch-ua-mobile': '?0',\n    'sec-ch-ua-platform': '\"Windows\"',",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "params = {\n    'variables': '{\"screen_name\":\"' + user + '\"}',\n}\nresponse = requests.get(\n    'https://x.com/i/api/graphql/-0XdHI-mrHWBQd8-oLo1aA/ProfileSpotlightsQuery',\n    params=params,\n    cookies=cookies,\n    headers=headers,\n)\nprint(response.json())",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "response = requests.get(\n    'https://x.com/i/api/graphql/-0XdHI-mrHWBQd8-oLo1aA/ProfileSpotlightsQuery',\n    params=params,\n    cookies=cookies,\n    headers=headers,\n)\nprint(response.json())\nrest_id = response.json()['data']['user_result_by_screen_name']['result']['rest_id']\n# Lấy rest_id\ntime.sleep(2)",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "rest_id",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "rest_id = response.json()['data']['user_result_by_screen_name']['result']['rest_id']\n# Lấy rest_id\ntime.sleep(2)\nheaders = {\n    \"sec-ch-ua\": '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Microsoft Edge\";v=\"128\"',\n    \"x-twitter-client-language\": \"en\",\n    \"x-csrf-token\": \"bc21315b56f43f409e44806b6ab46e995edb3c47918ca6b88651525745bfab97762556ddcf34c6ed2bab50c07fd7c06b797c7295e8fd7885c107fd9406f9ab00afbaad4c366cc873b22bd26cbb8938d1\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"authorization\": \"Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\",",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "headers = {\n    \"sec-ch-ua\": '\"Chromium\";v=\"128\", \"Not;A=Brand\";v=\"24\", \"Microsoft Edge\";v=\"128\"',\n    \"x-twitter-client-language\": \"en\",\n    \"x-csrf-token\": \"bc21315b56f43f409e44806b6ab46e995edb3c47918ca6b88651525745bfab97762556ddcf34c6ed2bab50c07fd7c06b797c7295e8fd7885c107fd9406f9ab00afbaad4c366cc873b22bd26cbb8938d1\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"authorization\": \"Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0\",\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"Referer\": f\"https://x.com/intent/follow?screen_name={user}\",\n    \"x-client-transaction-id\": \"cdqFEBDTphfaXiP+qhJ2T0fztxKcw2l+fkKpeUwWdUbhMqHlJZl1segTgxAsoGJ1jLuD7XO/t9TUbnvThvViqcTWY9YVcg\",",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "data = {\n    \"include_profile_interstitial_type\": \"1\",\n    \"include_blocking\": \"1\",\n    \"include_blocked_by\": \"1\",\n    \"include_followed_by\": \"1\",\n    \"include_want_retweets\": \"1\",\n    \"include_mute_edge\": \"1\",\n    \"include_can_dm\": \"1\",\n    \"include_can_media_tag\": \"1\",\n    \"include_ext_is_blue_verified\": \"1\",",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "followTwitter",
        "description": "followTwitter",
        "peekOfCode": "response = requests.post(\n    \"https://x.com/i/api/1.1/friendships/create.json\",\n    headers=headers,\n    data=data,\n    cookies=cookies,\n)\nprint(response.json())\n# headers = {\n#     'accept': '*/*',\n#     'accept-language': 'en-US,en;q=0.9,vi;q=0.8',",
        "detail": "followTwitter",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "passCloudfe",
        "description": "passCloudfe",
        "peekOfCode": "session = requests.Session()\n# Yêu cầu Cloudflare để lấy token\nurl_cf = \"https://autocaptcha.pro/apiv3/process\"\npayload_cf = {\n    \"key\": \"644076e7029aee3601f9781dbefc2318\",\n    \"type\": \"cloudflare\",\n    \"websitekey\": \"0x4AAAAAAADnPIDROrmt1Wwj\",\n    \"pageurl\": \"https://app.golike.net/\"\n}\nheaders_cf = {\"Content-Type\": \"application/json\"}",
        "detail": "passCloudfe",
        "documentation": {}
    },
    {
        "label": "url_cf",
        "kind": 5,
        "importPath": "passCloudfe",
        "description": "passCloudfe",
        "peekOfCode": "url_cf = \"https://autocaptcha.pro/apiv3/process\"\npayload_cf = {\n    \"key\": \"644076e7029aee3601f9781dbefc2318\",\n    \"type\": \"cloudflare\",\n    \"websitekey\": \"0x4AAAAAAADnPIDROrmt1Wwj\",\n    \"pageurl\": \"https://app.golike.net/\"\n}\nheaders_cf = {\"Content-Type\": \"application/json\"}\nprint('Giải Cloudflare CAPTCHA...')\n# Gửi yêu cầu POST đến Cloudflare",
        "detail": "passCloudfe",
        "documentation": {}
    },
    {
        "label": "payload_cf",
        "kind": 5,
        "importPath": "passCloudfe",
        "description": "passCloudfe",
        "peekOfCode": "payload_cf = {\n    \"key\": \"644076e7029aee3601f9781dbefc2318\",\n    \"type\": \"cloudflare\",\n    \"websitekey\": \"0x4AAAAAAADnPIDROrmt1Wwj\",\n    \"pageurl\": \"https://app.golike.net/\"\n}\nheaders_cf = {\"Content-Type\": \"application/json\"}\nprint('Giải Cloudflare CAPTCHA...')\n# Gửi yêu cầu POST đến Cloudflare\nresponse_cf = session.post(url_cf, headers=headers_cf, json=payload_cf)",
        "detail": "passCloudfe",
        "documentation": {}
    },
    {
        "label": "headers_cf",
        "kind": 5,
        "importPath": "passCloudfe",
        "description": "passCloudfe",
        "peekOfCode": "headers_cf = {\"Content-Type\": \"application/json\"}\nprint('Giải Cloudflare CAPTCHA...')\n# Gửi yêu cầu POST đến Cloudflare\nresponse_cf = session.post(url_cf, headers=headers_cf, json=payload_cf)\nif response_cf.status_code == 200:\n    cloudflare_token = response_cf.json().get('captcha').get('token')  # Lấy token từ response\n    print(\"Token Cloudflare:\", cloudflare_token)\n    # Tiếp tục giải reCAPTCHA v2\n    url_recaptcha = \"https://autocaptcha.pro/apiv3/process\"\n    payload_recaptcha = {",
        "detail": "passCloudfe",
        "documentation": {}
    },
    {
        "label": "response_cf",
        "kind": 5,
        "importPath": "passCloudfe",
        "description": "passCloudfe",
        "peekOfCode": "response_cf = session.post(url_cf, headers=headers_cf, json=payload_cf)\nif response_cf.status_code == 200:\n    cloudflare_token = response_cf.json().get('captcha').get('token')  # Lấy token từ response\n    print(\"Token Cloudflare:\", cloudflare_token)\n    # Tiếp tục giải reCAPTCHA v2\n    url_recaptcha = \"https://autocaptcha.pro/apiv3/process\"\n    payload_recaptcha = {\n        \"key\": \"644076e7029aee3601f9781dbefc2318\",\n        \"type\": \"recaptchav2\",\n        \"googlesitekey\": \"6LfiTfQUAAAAANM8yUWHdhLQ1pwdkaGlaCHUW609\",  # Thay bằng sitekey reCAPTCHA v2 của trang",
        "detail": "passCloudfe",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "printFolder",
        "description": "printFolder",
        "peekOfCode": "colors = [\"Black\", \"White\", \"Blue\", \"Red\", \"Yellow\", \"Green\", \"Gray\"]\nsizes = ['S', 'M', 'L', 'XL']\n# with open('ecommerce.products.json', 'r', encoding='utf-8') as file:\n#     data = json.load(file)\nimport json\nwith open('ecommerce.products.json', 'r', encoding='utf-8') as file:\n    data = json.load(file)\n# Kiểm tra nếu 'size' không tồn tại hoặc là list, tạo mới là dictionary\nfor item in data:\n    if 'size' not in item or not isinstance(item['size'], dict):",
        "detail": "printFolder",
        "documentation": {}
    },
    {
        "label": "sizes",
        "kind": 5,
        "importPath": "printFolder",
        "description": "printFolder",
        "peekOfCode": "sizes = ['S', 'M', 'L', 'XL']\n# with open('ecommerce.products.json', 'r', encoding='utf-8') as file:\n#     data = json.load(file)\nimport json\nwith open('ecommerce.products.json', 'r', encoding='utf-8') as file:\n    data = json.load(file)\n# Kiểm tra nếu 'size' không tồn tại hoặc là list, tạo mới là dictionary\nfor item in data:\n    if 'size' not in item or not isinstance(item['size'], dict):\n        item['color'] = {}  # Khởi tạo nếu chưa có",
        "detail": "printFolder",
        "documentation": {}
    },
    {
        "label": "api_id",
        "kind": 5,
        "importPath": "tele",
        "description": "tele",
        "peekOfCode": "api_id = '21931615'  # Thay thế bằng API ID của bạn\napi_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")",
        "detail": "tele",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "kind": 5,
        "importPath": "tele",
        "description": "tele",
        "peekOfCode": "api_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)",
        "detail": "tele",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "tele",
        "description": "tele",
        "peekOfCode": "client = TelegramClient('+84905227657.session', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)\n    match = re.search(r'\\b\\d{5}\\b', message_text)\n    if match:",
        "detail": "tele",
        "documentation": {}
    },
    {
        "label": "api_id",
        "kind": 5,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "api_id = '21931615'  # Thay thế bằng API ID của bạn\napi_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "api_hash",
        "kind": 5,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "api_hash = '6cd1f6260d0050adf4af5f1d99dbde09'  # Thay thế bằng API Hash của bạn\n# Tạo Telegram client\nclient = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test copy",
        "description": "test copy",
        "peekOfCode": "client = TelegramClient('+84905227657', api_id, api_hash)\n# Hàm xử lý khi nhận được tin nhắn từ kênh ID `777000`\n@client.on(events.NewMessage(chats=777000))  # Chỉ lắng nghe tin nhắn từ 777000\nasync def handler(event):\n    # In ra nội dung tin nhắn\n    message_text = event.text\n    print(f\"Tin nhắn từ {event.sender_id}: {message_text}\")\n    # Tìm mã đăng nhập trong tin nhắn (nếu có)\n    match = re.search(r'\\b\\d{5}\\b', message_text)\n    if match:",
        "detail": "test copy",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "headers = {\n    'accept': 'application/json, text/plain, */*',\n    'accept-language': 'en-US,en;q=0.9',\n    'authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9nYXRld2F5LmdvbGlrZS5uZXRcL2FwaVwvbG9naW4iLCJpYXQiOjE3MjY5MjE0ODAsImV4cCI6MTc1ODQ1NzQ4MCwibmJmIjoxNzI2OTIxNDgwLCJqdGkiOiJWQTVNS0xUOEExaTlNbVE5Iiwic3ViIjoyODE0ODgxLCJwcnYiOiJiOTEyNzk5NzhmMTFhYTdiYzU2NzA0ODdmZmYwMWUyMjgyNTNmZTQ4In0.H3V1VNWTM_QQuCcCKQ5YSFsB8_2hgj3cjvwDRp_8uv0',\n    'content-type': 'application/json;charset=utf-8',\n    'origin': 'https://app.golike.net',\n    'priority': 'u=1, i',\n    'referer': 'https://app.golike.net/',\n    'sec-ch-ua': '\"Chromium\";v=\"124\", \"Google Chrome\";v=\"124\", \"Not-A.Brand\";v=\"99\"',\n    'sec-ch-ua-mobile': '?0',",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "params = {\n    'account_id': '104363',\n}\nresponse = requests.get('https://gateway.golike.net/api/advertising/publishers/twitter/jobs', params=params, headers=headers)\nprint(response.json())",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "response = requests.get('https://gateway.golike.net/api/advertising/publishers/twitter/jobs', params=params, headers=headers)\nprint(response.json())",
        "detail": "test",
        "documentation": {}
    }
]